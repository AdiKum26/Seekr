import { motion } from "motion/react";
import { Star, TrendingUp, TrendingDown, Clock, Users, BookOpen, Brain, Sparkles, ChevronRight, ExternalLink, ThumbsUp, AlertCircle, MapPin } from "lucide-react";
import { Badge } from "./ui/badge";
import { Progress } from "./ui/progress";
import { useState } from "react";

interface Course {
  id: string;
  code: string;
  name: string;
  department: string;
  section: string;
  sln: string;
  professor: string;
  professorRating: number;
  professorReviews: number;
  quarter: string;
  meetingTime: string;
  location: string;
  difficulty: number;
  averageGrade: string;
  gpaAverage: number;
  workload: string;
  rating: number;
  enrollment: number;
  maxEnrollment: number;
  credits: number;
  aiRecommended: boolean;
  tags: string[];
  gradeDistribution: {
    A: number;
    B: number;
    C: number;
    D: number;
    F: number;
  };
  highlights: string[];
  rmpUrl?: string;
}

const courses: Course[] = [
  {
    id: "1",
    code: "CSE 142",
    name: "Computer Programming I",
    department: "Computer Science & Engineering",
    section: "A",
    sln: "12345",
    professor: "Brett Wortzman",
    professorRating: 4.8,
    professorReviews: 324,
    quarter: "Winter 2025",
    meetingTime: "MWF 10:30-11:20",
    location: "CSE2 G01",
    difficulty: 2.5,
    averageGrade: "A-",
    gpaAverage: 3.4,
    workload: "10-12 hrs/week",
    rating: 4.6,
    enrollment: 245,
    maxEnrollment: 300,
    credits: 4,
    aiRecommended: true,
    tags: ["Intro", "Programming", "Required"],
    gradeDistribution: { A: 45, B: 35, C: 15, D: 3, F: 2 },
    highlights: ["Clear lectures", "Great for beginners", "Helpful TA sessions"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/2150191"
  },
  {
    id: "2",
    code: "CSE 373",
    name: "Data Structures & Algorithms",
    department: "Computer Science & Engineering",
    section: "A",
    sln: "12346",
    professor: "Kevin Lin",
    professorRating: 4.3,
    professorReviews: 256,
    quarter: "Winter 2025",
    meetingTime: "TTh 1:30-2:50",
    location: "MOR 220",
    difficulty: 4.2,
    averageGrade: "B",
    gpaAverage: 3.0,
    workload: "15-20 hrs/week",
    rating: 4.2,
    enrollment: 180,
    maxEnrollment: 200,
    credits: 4,
    aiRecommended: true,
    tags: ["Core", "Challenging", "High Demand"],
    gradeDistribution: { A: 30, B: 40, C: 20, D: 7, F: 3 },
    highlights: ["Industry relevant", "Tough but rewarding", "Excellent preparation"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/2526891"
  },
  {
    id: "3",
    code: "CSE 446",
    name: "Machine Learning",
    department: "Computer Science & Engineering",
    section: "A",
    sln: "12347",
    professor: "Sham Kakade",
    professorRating: 4.9,
    professorReviews: 412,
    quarter: "Spring 2025",
    meetingTime: "MWF 1:30-2:20",
    location: "CSE2 G20",
    difficulty: 4.5,
    averageGrade: "B+",
    gpaAverage: 3.3,
    workload: "18-25 hrs/week",
    rating: 4.7,
    enrollment: 150,
    maxEnrollment: 150,
    credits: 4,
    aiRecommended: true,
    tags: ["Advanced", "Popular", "Research-focused"],
    gradeDistribution: { A: 35, B: 45, C: 15, D: 3, F: 2 },
    highlights: ["Amazing professor", "Cutting-edge content", "Great projects"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/2350421"
  },
  {
    id: "4",
    code: "MATH 308",
    name: "Matrix Algebra with Applications",
    department: "Mathematics",
    section: "B",
    sln: "12348",
    professor: "James Morrow",
    professorRating: 3.8,
    professorReviews: 189,
    quarter: "Winter 2025",
    meetingTime: "MWF 9:30-10:20",
    location: "LOW 101",
    difficulty: 3.8,
    averageGrade: "B-",
    gpaAverage: 2.8,
    workload: "12-15 hrs/week",
    rating: 3.9,
    enrollment: 120,
    maxEnrollment: 150,
    credits: 3,
    aiRecommended: false,
    tags: ["Math", "Prerequisite"],
    gradeDistribution: { A: 25, B: 35, C: 25, D: 10, F: 5 },
    highlights: ["Theoretical", "Office hours helpful", "Challenging exams"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/1635421"
  },
  {
    id: "5",
    code: "CSE 154",
    name: "Web Programming",
    department: "Computer Science & Engineering",
    section: "AA",
    sln: "12349",
    professor: "Melissa Hovik",
    professorRating: 4.6,
    professorReviews: 298,
    quarter: "Spring 2025",
    meetingTime: "MW 3:30-4:50",
    location: "MGH 228",
    difficulty: 2.8,
    averageGrade: "A-",
    gpaAverage: 3.5,
    workload: "10-14 hrs/week",
    rating: 4.5,
    enrollment: 200,
    maxEnrollment: 220,
    credits: 4,
    aiRecommended: true,
    tags: ["Practical", "Popular", "Portfolio Builder"],
    gradeDistribution: { A: 50, B: 30, C: 15, D: 3, F: 2 },
    highlights: ["Fun projects", "Practical skills", "Engaging lectures"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/2234567"
  },
  {
    id: "6",
    code: "CSE 311",
    name: "Foundations of Computing I",
    department: "Computer Science & Engineering",
    section: "A",
    sln: "12350",
    professor: "Shayan Oveisgharan",
    professorRating: 4.1,
    professorReviews: 203,
    quarter: "Winter 2025",
    meetingTime: "TTh 10:00-11:20",
    location: "PAA A110",
    difficulty: 3.9,
    averageGrade: "B",
    gpaAverage: 3.1,
    workload: "14-18 hrs/week",
    rating: 4.0,
    enrollment: 165,
    maxEnrollment: 180,
    credits: 4,
    aiRecommended: false,
    tags: ["Theory", "Core", "Math-heavy"],
    gradeDistribution: { A: 28, B: 42, C: 20, D: 7, F: 3 },
    highlights: ["Mind-bending", "Well-structured", "Good problem sets"],
    rmpUrl: "https://www.ratemyprofessors.com/professor/2678901"
  }
];

export function ClassesPage() {
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>("all");
  const [sortBy, setSortBy] = useState<string>("recommended");

  const difficultyFilters = [
    { id: "all", label: "All Levels" },
    { id: "easy", label: "Easy (1-2)", range: [0, 2] },
    { id: "medium", label: "Medium (2-4)", range: [2, 4] },
    { id: "hard", label: "Hard (4-5)", range: [4, 5] }
  ];

  const filteredCourses = courses.filter(course => {
    if (selectedDifficulty === "all") return true;
    const filter = difficultyFilters.find(f => f.id === selectedDifficulty);
    if (!filter || !filter.range) return true;
    return course.difficulty >= filter.range[0] && course.difficulty <= filter.range[1];
  });

  const getDifficultyColor = (difficulty: number) => {
    if (difficulty < 2.5) return "text-green-600 bg-green-500/10";
    if (difficulty < 3.5) return "text-yellow-600 bg-yellow-500/10";
    return "text-red-600 bg-red-500/10";
  };

  const getDifficultyLabel = (difficulty: number) => {
    if (difficulty < 2.5) return "Easy";
    if (difficulty < 3.5) return "Medium";
    return "Hard";
  };

  return (
    <div className="max-w-7xl mx-auto px-8 py-8">
      {/* Header */}
      <motion.div
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        className="mb-8"
      >
        <h1 className="mb-2">Course Explorer</h1>
        <p className="text-gray-600">
          AI-powered course recommendations with RateMyProfessor integration, grade distributions, and difficulty ratings
        </p>
      </motion.div>

      {/* Stats Overview */}
      <motion.div
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.1 }}
        className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8"
      >
        <div className="bg-gradient-to-br from-purple-500/10 to-blue-500/10 backdrop-blur-xl rounded-2xl p-5 border border-gray-200/50">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center">
              <BookOpen className="text-white" size={20} />
            </div>
            <div>
              <p className="text-2xl">{courses.length}</p>
              <p className="text-sm text-gray-600">Available Courses</p>
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 backdrop-blur-xl rounded-2xl p-5 border border-gray-200/50">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center">
              <Sparkles className="text-white" size={20} />
            </div>
            <div>
              <p className="text-2xl">{courses.filter(c => c.aiRecommended).length}</p>
              <p className="text-sm text-gray-600">AI Recommended</p>
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-br from-amber-500/10 to-orange-500/10 backdrop-blur-xl rounded-2xl p-5 border border-gray-200/50">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-amber-500 to-orange-600 flex items-center justify-center">
              <Star className="text-white" size={20} />
            </div>
            <div>
              <p className="text-2xl">4.4</p>
              <p className="text-sm text-gray-600">Avg Rating</p>
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-br from-blue-500/10 to-cyan-500/10 backdrop-blur-xl rounded-2xl p-5 border border-gray-200/50">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 to-cyan-600 flex items-center justify-center">
              <Brain className="text-white" size={20} />
            </div>
            <div>
              <p className="text-2xl">3.2</p>
              <p className="text-sm text-gray-600">Avg Difficulty</p>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Filters */}
      <motion.div
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2 }}
        className="flex items-center gap-4 mb-8 flex-wrap"
      >
        <div className="flex gap-2">
          {difficultyFilters.map((filter) => (
            <motion.button
              key={filter.id}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setSelectedDifficulty(filter.id)}
              className={`px-4 py-2 rounded-xl transition-all ${
                selectedDifficulty === filter.id
                  ? "bg-[var(--university-primary)] text-white shadow-lg"
                  : "bg-white border border-gray-200 text-gray-700 hover:border-[var(--university-primary)]"
              }`}
            >
              {filter.label}
            </motion.button>
          ))}
        </div>
      </motion.div>

      {/* Course Cards */}
      <div className="space-y-6">
        {filteredCourses.map((course, index) => (
          <motion.div
            key={course.id}
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: index * 0.05 }}
            whileHover={{ y: -4 }}
            className="bg-white rounded-3xl overflow-hidden border border-gray-200/50 shadow-lg hover:shadow-2xl transition-all"
          >
            <div className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3>{course.code}: {course.name}</h3>
                    {course.aiRecommended && (
                      <Badge className="bg-purple-500/10 text-purple-600 border-purple-200">
                        <Sparkles size={12} className="mr-1" />
                        AI Match
                      </Badge>
                    )}
                  </div>
                  
                  <p className="text-sm text-gray-600 mb-2">{course.department}</p>
                  
                  <div className="grid grid-cols-2 gap-3 text-sm text-gray-600 mb-3">
                    <div className="flex items-center gap-1">
                      <Users size={14} />
                      {course.professor}
                    </div>
                    <div className="flex items-center gap-1">
                      <Star size={14} className="fill-amber-400 text-amber-400" />
                      {course.professorRating} ({course.professorReviews} reviews)
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock size={14} />
                      {course.meetingTime}
                    </div>
                    <div className="flex items-center gap-1">
                      <MapPin size={14} />
                      {course.location}
                    </div>
                  </div>

                  <div className="flex items-center gap-3 mb-3 text-sm">
                    <Badge variant="outline" className="text-xs">
                      Section {course.section} • SLN {course.sln}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      {course.quarter}
                    </Badge>
                  </div>

                  <div className="flex flex-wrap gap-2 mb-4">
                    {course.tags.map((tag, i) => (
                      <Badge key={i} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="text-right">
                  <div className={`inline-flex items-center gap-1 px-3 py-1.5 rounded-full text-sm ${getDifficultyColor(course.difficulty)}`}>
                    <AlertCircle size={14} />
                    {getDifficultyLabel(course.difficulty)} ({course.difficulty}/5)
                  </div>
                </div>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-xl p-3">
                  <p className="text-xs text-gray-600 mb-1">Average Grade</p>
                  <p className="text-xl">{course.averageGrade}</p>
                  <p className="text-xs text-gray-500">GPA: {course.gpaAverage}</p>
                </div>

                <div className="bg-gradient-to-br from-blue-500/10 to-cyan-500/10 rounded-xl p-3">
                  <p className="text-xs text-gray-600 mb-1">Enrollment</p>
                  <p className="text-xl">{course.enrollment}/{course.maxEnrollment}</p>
                  <Progress 
                    value={(course.enrollment / course.maxEnrollment) * 100} 
                    className="h-1.5 mt-1"
                  />
                </div>

                <div className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-xl p-3">
                  <p className="text-xs text-gray-600 mb-1">Course Rating</p>
                  <div className="flex items-center gap-1">
                    <Star size={16} className="fill-amber-400 text-amber-400" />
                    <p className="text-xl">{course.rating}</p>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-xl p-3">
                  <p className="text-xs text-gray-600 mb-1">Credits</p>
                  <p className="text-xl">{course.credits}</p>
                </div>
              </div>

              {/* Grade Distribution */}
              <div className="bg-gray-50 rounded-xl p-4 mb-4">
                <p className="text-sm mb-3">Grade Distribution</p>
                <div className="flex gap-2 h-24 items-end">
                  {Object.entries(course.gradeDistribution).map(([grade, percentage]) => (
                    <div key={grade} className="flex-1 flex flex-col items-center gap-1">
                      <div 
                        className="w-full bg-gradient-to-t from-[var(--university-primary)] to-[var(--university-secondary)] rounded-t-lg transition-all hover:opacity-80"
                        style={{ height: `${percentage}%` }}
                      />
                      <div className="text-xs">
                        <p className="text-gray-600">{grade}</p>
                        <p>{percentage}%</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Highlights */}
              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-2">Student Highlights:</p>
                <div className="flex flex-wrap gap-2">
                  {course.highlights.map((highlight, i) => (
                    <div key={i} className="flex items-center gap-1 text-sm bg-blue-50 text-blue-700 px-3 py-1.5 rounded-full">
                      <ThumbsUp size={12} />
                      {highlight}
                    </div>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="flex-1 bg-gradient-to-r from-[var(--university-primary)] to-[var(--university-secondary)] text-white rounded-xl py-3 flex items-center justify-center gap-2"
                >
                  View Course Details
                  <ChevronRight size={16} />
                </motion.button>
                
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => window.open(course.rmpUrl, '_blank')}
                  className="px-6 bg-white border-2 border-[var(--university-primary)] text-[var(--university-primary)] hover:bg-[var(--university-primary)] hover:text-white transition-colors rounded-xl py-3 flex items-center gap-2"
                >
                  RateMyProfessor
                  <ExternalLink size={16} />
                </motion.button>

                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="px-6 bg-gray-100 hover:bg-gray-200 rounded-xl transition-colors"
                >
                  Add to Plan
                </motion.button>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* AI Insights */}
      <motion.div
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.5 }}
        className="mt-8 bg-gradient-to-br from-[var(--university-primary)] to-[var(--university-accent)] rounded-3xl p-6 text-white"
      >
        <div className="flex items-start gap-4">
          <div className="w-12 h-12 rounded-xl bg-white/20 backdrop-blur-sm flex items-center justify-center flex-shrink-0">
            <Brain className="text-white" size={24} />
          </div>
          <div className="flex-1">
            <h3 className="mb-2">AI Course Recommendations</h3>
            <p className="text-white/90 mb-4">
              Based on your major (Computer Science), interests (AI/ML), and academic performance, we recommend taking CSE 446 (Machine Learning) next quarter. Dr. Emily Wang has exceptional reviews and the course projects align perfectly with your career goals in AI research.
            </p>
            <div className="flex gap-3">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="bg-white/20 hover:bg-white/30 backdrop-blur-sm px-4 py-2 rounded-xl transition-colors"
              >
                View Full Analysis
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="bg-white/20 hover:bg-white/30 backdrop-blur-sm px-4 py-2 rounded-xl transition-colors"
              >
                Build 4-Year Plan
              </motion.button>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}
