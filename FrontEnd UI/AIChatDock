import { motion, AnimatePresence } from "motion/react";
import { useState } from "react";
import { X, Send, Mic, Sparkles, Zap, Mail, FileText } from "lucide-react";
import { AIAvatar } from "./AIAvatar";

interface Message {
  id: number;
  type: "user" | "ai";
  content: string;
  actions?: { icon: any; label: string; description: string }[];
}

export function AIChatDock() {
  const [isExpanded, setIsExpanded] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      type: "ai",
      content: "Hi! I'm your Seekr AI mentor. I've found 3 new opportunities that match your profile perfectly. Would you like to see them?",
      actions: [
        { icon: Sparkles, label: "Show Opportunities", description: "3 new matches found" },
        { icon: Mail, label: "Email Professors", description: "Draft outreach for research positions" },
        { icon: FileText, label: "Review Applications", description: "2 applications need attention" }
      ]
    }
  ]);

  const handleSend = () => {
    if (!inputValue.trim()) return;
    
    const userMessage: Message = {
      id: messages.length + 1,
      type: "user",
      content: inputValue
    };
    
    setMessages([...messages, userMessage]);
    setInputValue("");
    
    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: messages.length + 2,
        type: "ai",
        content: "I'm analyzing your request and searching across thousands of opportunities. This will take just a moment..."
      };
      setMessages(prev => [...prev, aiMessage]);
    }, 500);
  };

  return (
    <>
      {/* Floating button */}
      <AnimatePresence>
        {!isExpanded && (
          <motion.button
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={() => setIsExpanded(true)}
            className="fixed bottom-8 right-8 w-16 h-16 rounded-full bg-gradient-to-br from-[var(--university-primary)] to-[var(--university-secondary)] shadow-2xl flex items-center justify-center z-50 group"
            style={{
              boxShadow: "0 10px 40px var(--glow-color)"
            }}
          >
            <AIAvatar size="md" animated={false} />
            
            {/* Notification badge */}
            <motion.div
              animate={{
                scale: [1, 1.2, 1]
              }}
              transition={{
                duration: 2,
                repeat: Infinity
              }}
              className="absolute -top-1 -right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-white text-xs"
            >
              3
            </motion.div>
            
            {/* Pulse effect */}
            <motion.div
              animate={{
                scale: [1, 1.5],
                opacity: [0.5, 0]
              }}
              transition={{
                duration: 2,
                repeat: Infinity
              }}
              className="absolute inset-0 rounded-full bg-[var(--university-primary)]"
            />
          </motion.button>
        )}
      </AnimatePresence>

      {/* Expanded chat panel */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ x: 400, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: 400, opacity: 0 }}
            transition={{ type: "spring", damping: 25, stiffness: 200 }}
            className="fixed right-8 bottom-8 w-96 h-[600px] bg-white/95 backdrop-blur-2xl rounded-3xl shadow-2xl border border-gray-200/50 flex flex-col z-50 overflow-hidden"
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-[var(--university-primary)] to-[var(--university-secondary)] p-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <AIAvatar size="sm" animated={true} />
                <div>
                  <h3 className="text-white">Seekr AI Mentor</h3>
                  <div className="flex items-center gap-1">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                    <span className="text-white/80 text-xs">Active</span>
                  </div>
                </div>
              </div>
              <motion.button
                whileHover={{ scale: 1.1, rotate: 90 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => setIsExpanded(false)}
                className="text-white/80 hover:text-white"
              >
                <X size={20} />
              </motion.button>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ y: 10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                >
                  <div className={`max-w-[80%] ${
                    message.type === "user"
                      ? "bg-[var(--university-primary)] text-white rounded-2xl rounded-br-sm"
                      : "bg-gray-100 text-gray-900 rounded-2xl rounded-bl-sm"
                  } p-3`}>
                    <p className="text-sm">{message.content}</p>
                    
                    {/* Action buttons for AI messages */}
                    {message.actions && (
                      <div className="mt-3 space-y-2">
                        {message.actions.map((action, index) => {
                          const Icon = action.icon;
                          return (
                            <motion.button
                              key={index}
                              whileHover={{ scale: 1.02, x: 4 }}
                              whileTap={{ scale: 0.98 }}
                              className="w-full bg-white rounded-xl p-3 flex items-start gap-3 text-left shadow-sm hover:shadow-md transition-shadow"
                            >
                              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-[var(--university-primary)] to-[var(--university-secondary)] flex items-center justify-center flex-shrink-0">
                                <Icon size={16} className="text-white" />
                              </div>
                              <div className="flex-1">
                                <p className="text-sm text-gray-900">{action.label}</p>
                                <p className="text-xs text-gray-600">{action.description}</p>
                              </div>
                            </motion.button>
                          );
                        })}
                      </div>
                    )}
                  </div>
                </motion.div>
              ))}
            </div>

            {/* Input area */}
            <div className="p-4 border-t border-gray-200">
              <div className="bg-gray-100 rounded-2xl p-3 flex items-center gap-2">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && handleSend()}
                  placeholder="Ask me anything..."
                  className="flex-1 bg-transparent outline-none text-sm"
                />
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <Mic size={20} />
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={handleSend}
                  className="bg-gradient-to-r from-[var(--university-primary)] to-[var(--university-secondary)] text-white w-8 h-8 rounded-xl flex items-center justify-center"
                >
                  <Send size={16} />
                </motion.button>
              </div>
              
              {/* Quick actions */}
              <div className="flex gap-2 mt-2">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  className="flex-1 bg-purple-500/10 text-purple-600 rounded-lg px-3 py-2 text-xs flex items-center justify-center gap-1"
                >
                  <Zap size={12} />
                  Quick Apply
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  className="flex-1 bg-blue-500/10 text-blue-600 rounded-lg px-3 py-2 text-xs flex items-center justify-center gap-1"
                >
                  <Mail size={12} />
                  Draft Email
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
